pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.jenkins"
            args '--network=ci.network'
        }
    }

    environment {
        RND = "${BUILD_NUMBER}_${BRANCH_NAME}"
        PHPUNITARG="--testsuite Unit"
        COMPOSERARG="--no-ansi --no-scripts"
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
                sh "composer -V"
            }
        }
        stage ('Set Env') {
            steps {
                sh "ln -fs ./.env.jenkins ./.env"
                sh "cat ./.env"
                sh "mkdir -p build"
            }
        }

        stage ('Prepare') {
            steps {
                sh "./bin/ci-scripts/do_run.sh before_install_test.sh"
            }
        }

        stage ('Install Test') {
            steps {
                sh "./bin/ci-scripts/do_run.sh install_test.sh"
            }
        }


        stage ('Run Test') {
            steps {
                sh "./bin/ci-scripts/do_run.sh run_test.sh"
                step([
                    $class: 'XUnitBuilder',
                    thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
                    tools: [[$class: 'JUnitType', pattern: 'build/junit.xml']]
                ])
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/coverage', reportFiles: 'index.html', reportName: 'Coverage Report', reportTitles: ''])
            }
        }
        /*
          stage ('Archive Gzip') {
          steps {
          sh 'tar -czf Platform_${BRANCH_NAME}.tgz ./*'
          archiveArtifacts artifacts: "Platform_${BRANCH_NAME}.tgz", fingerprint: true
          }
          }
        */


    }



    post {
        always {
            cleanWs()

        }
    }

}
