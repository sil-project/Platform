pipeline {
    agent {
        dockerfile {
            filename "etc/dockerfile.build.jenkins"
            args '--network=ci.network  --volume /home/jenkins/cache/pip:/home/jenkins/.cache/pip --volume /home/jenkins/cache/composer:/home/jenkins/.composer/cache'
           /* '--volume /home/jenkins/cache/npm:/home/jenkins/.npm/_cacache' */
        }
    }

    environment {
        RND = "${BUILD_NUMBER}"
        Version = sh(returnStdout: true, script: 'git describe --tags').trim()
        Tag = sh(returnStdout: true, script: 'git describe --tags --abbrev=0').trim()
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
                sh "composer -V"
            }
        }
        stage ('Set Env') {
            steps {
                sh "ln -fs ./.env.jenkins ./.env"
                sh "cat ./.env"
                sh "mkdir -p build"
            }
        }


        stage ('Prepare') {
            steps {
                sh "./bin/ci-scripts/do_run.sh before_install_test.sh"
                sh "./bin/ci-scripts/do_run.sh before_install_ui_test.sh"
            }
        }

        stage ('Create Database') {
            steps {
                sh "./bin/ci-scripts/do_run.sh set_db_host_test.sh # needed before create as it set .pgpass"
                sh "./bin/ci-scripts/do_run.sh create_database_test.sh"
                sh "./bin/ci-scripts/do_run.sh create_table_test.sh"

            }
        }

        stage('Parallel Install') {
            parallel {
                stage ('Install Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh install_test.sh"
                        sh "./bin/ci-scripts/do_run.sh install_db_test.sh"
                        sh "./bin/ci-scripts/do_run.sh install_ui_test.sh"
                    }
                }

            }
        }
        stage('Parallel Start') {
            parallel {
                stage ('Start Project') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh before_script_start_test.sh"
                    }
                }

                stage ('Start Selenium') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh launch_selenium_test.sh"
                    }
                }
            }
        }

        stage('Parallel Report') {
            parallel {

                stage ('Run UI Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh run_ui_test.sh"

                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'src/Tests/_output/', reportFiles: 'report.html', reportName: 'Codeception Report', reportTitles: ''])
                    }
                }

            }
        }

    }



    post {
        always {
            cleanWs()

        }
    }

}
