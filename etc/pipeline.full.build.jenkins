pipeline {
    parameters {
        string(defaultValue: '7.1', description: 'Version of Php', name: 'phpVersion')
    }

    agent {
        dockerfile {
            filename "etc/dockerfile.build.jenkins"
            additionalBuildArgs "--build-arg UID=`id -u` --build-arg GID=`id -g` --build-arg PHPVER=${params.phpVersion}"
            args '--network=ci.network --volume $HOME/cache/pip:/home/jenkins/.cache/pip --volume $HOME/cache/composer:/home/jenkins/.composer/cache --volume $HOME/cache/node_modules:/home/jenkins/node_modules'
           /* '--volume $HOME/cache/npm:/home/jenkins/.npm/_cacache' */
        }
    }



    environment {
        RND = "${BUILD_NUMBER}"
        COMPOSERARG=""
        /* Not working in multi branch pipeline
        Version = sh(returnStdout: true, script: 'git describe --tags').trim()
        Tag = sh(returnStdout: true, script: 'git describe --tags --abbrev=0').trim()
        */
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage ('Where Am I') {
            steps {
                sh "uname -a"
                sh "php -v"
                sh "composer -V"
            }
        }

        stage ('Set Env') {
            steps {
                sh './bin/ci-scripts/set_env_with_etcd.sh'
                sh './bin/ci-scripts/set_pgpass_test.sh'
                sh 'cat ./.env'
                sh 'cat $HOME/.pgpass'

            }
        }

        stage ('Prepare') {
            steps {
                sh 'mkdir -p build'
                sh "ln -sf /home/jenkins/node_modules"
                sh "./bin/ci-scripts/do_run.sh before_install_test.sh"
            }
        }

        stage ('Create Database') {
            steps {
                sh "./bin/ci-scripts/do_run.sh create_database_test.sh"
                sh "./bin/ci-scripts/do_run.sh create_table_test.sh"
            }
        }

        stage ('Install Test') {
            steps {
                sh "./bin/ci-scripts/do_run.sh install_test.sh"
                sh "./bin/ci-scripts/do_run.sh install_db_test.sh"
                sh "./bin/ci-scripts/do_run.sh install_ui_test.sh"
            }
        }

        stage ('Start Project') {
            steps {
                sh "./bin/ci-scripts/do_run.sh before_script_start_test.sh"
            }
        }

        stage('Parallel Run') {
            parallel {
                stage ('Run Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh run_test.sh"
                        step([
                            $class: 'XUnitBuilder',
                            thresholds: [[$class: 'FailedThreshold', unstableThreshold: '1']],
                            tools: [[$class: 'JUnitType', pattern: 'build/junit.xml']]
                        ])
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/coverage', reportFiles: 'index.html', reportName: 'Coverage Report', reportTitles: ''])
                    }
                }

                stage ('Run UI Test') {
                    steps {
                        sh "./bin/ci-scripts/do_run.sh run_ui_test.sh"
                    }
                }

            }
        }

    }

    post {
        always {
            /* always is run before other status ... So we can't clean up here */
            /* cleanWs() */
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'src/Tests/_output/', reportFiles: 'report.html', reportName: 'Codeception Report', reportTitles: ''])
        }

        aborted
        {
            cleanWs()
        }

        failure
        {
            cleanWs()
        }

        unstable {
            cleanWs()
        }

        success {
            sh './bin/ci-scripts/do_run.sh gen_archive.sh'
            archiveArtifacts artifacts: "*.tar.gz*, *Latest*", fingerprint: true
            build job: 'Copy Artifact', parameters: [string(name: 'Job', value: "${JOB_NAME}"), string(name: 'Project', value: "Platform"), string(name: 'Branch', value: "${BRANCH_NAME}")], wait: false
            cleanWs()
        }
    }
}
